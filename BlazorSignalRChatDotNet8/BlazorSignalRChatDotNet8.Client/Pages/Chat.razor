@page "/chat"
@inject NavigationManager NavigationManager // for URL navigation//
@inject IJSRuntime JSRuntime  //for JavaScript interop//
@rendermode InteractiveWebAssembly

<h3 style="text-align: center;">Chat</h3>

@if (string.IsNullOrWhiteSpace(username))
{
    <div class="input-group">
        <input type="text" class="message-input" placeholder="Enter your username" @bind="username" />
        <button @onclick="SetUsername">Set Username</button>
    </div>
    @if (showErrorMessage)
    {
        <p style="color: red;">Username Cannot be empty</p>
    }
}

else
{
    @if (IsConnected) // check if connection is established
    {
        @if (messages != null)
        {
            <div id="messagesContainer">
                <ul id="messagesList">
                    @foreach (var message in messages)
                    {
                        var parts = message.Split(':');
                        <li><span class="username">@parts[0]:</span>@parts[1]</li>
                        @* <li>@message</li> *@
                    }

                </ul>
            </div>
        }

        <div class="input-group">
            <input type="text" class="message-input" placeholder="Enter your message" @bind="messageInput" />
            <button @onclick="Send">Send</button>
        </div>
    }
    else
    {
        <p>Connecting...</p>
    }
}

@code {
    private HubConnection _hubConnection; // Connection to chat hub
    private List<string> messages = new List<string>();

    private string username = string.Empty;

    private string messageInput;
    private bool showErrorMessage = false;

    protected override async Task OnInitializedAsync() // Initializes connnection on load
    {
        _hubConnection = new HubConnectionBuilder()  // builds hub connection
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub")) //sets hub URL
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) => // listens for incoming message
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged); // triggers UI update
            ScrollToBottom();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        await _hubConnection.SendAsync("SendMessage", username, messageInput);
        messageInput = string.Empty;
    }

    private async Task ScrollToBottom()  // automatic scroll to bottom of messages
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messagesContainer"); // calls JS to scroll
    }

    private void SetUsername()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            showErrorMessage = true;
        }
        else
        {
            showErrorMessage = false;
            username = username.Trim();
        }

    }


    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected; // checks connection status
}