@page "/chat"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly

<h3>Chat</h3>

@if (string.IsNullOrWhiteSpace(username))
{
    <input type="text" placeholder="Enter your username" @bind="username" />
    <button @onclick="SetUsername">Set Username</button>
}



@if (IsConnected)
{
    @if (messages != null)
    {
        <div id="messagesContainer">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }

        </ul>
        </div>
    }


    <input type="text" placeholder="Enter your message" @bind="messageInput" />
    <button @onclick="Send">Send</button>
}
else
{
<p>Connecting...</p>
}



@code {
    private HubConnection _hubConnection;
    private List<string> messages = new List<string>();
    private string username = string.Empty;
    //private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();

    }

    private async Task Send()
    {
        await _hubConnection.SendAsync("SendMessage", username, messageInput);
        messageInput = string.Empty;

    }

    private void ScrollToBottom()
    {
        JSRuntime.InvokeVoidAsync("scrollToBottom", "messageContainer");
    }

    private void SetUsername() => username = username.Trim();

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
}